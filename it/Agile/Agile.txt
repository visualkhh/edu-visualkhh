애자일
소프트웨 개발 방법
협력, 피드백, 학습

생각없이 개발하지말기
왜필요한지 의문가지지 않고, 해왔던대로 하는것은 아니다.!

워터풀방식(top(추상) -> down(구체화)) 폭포수 모델
	- 수동적 (boss를 따라가야된다라는 무책임론 하는것만하면된다)
	- 불확실한 상황에서는 워터풀이 적합하지 않다.
	- 하부공정에 참여를 하지않는 윗사람들이 계획세우기 좋으니깐(책임전가, 돈에대한 지출항목이 뚜렷해지니..)
	  하기위하여 워터풀을 많이 선호된다.
	  인력수급이라던지, 돈지급등.. 우리나라 방식의 건축업스타일 방식이 녹아져있기때문이다.
	- 갑이 -> 을병이 알아서 잘하겠지!!!!!라는 생각을 하게되면 을병또한 주인의식이 없어진다.


애자일 (병렬적,반복형 개발) 잘할수있는 방법을 찾다보니 애자일이 나오게 되었다..
	- 능동적, 당사자들이 재미있어야한다!!!!!
	- 문제가 불확실상황이 높고, 복잡하면 적용하기 적합하다
	- 추상,구상을 병렬적으로 같이한다.(뒤죽박죽아님  정시을 더 차리고 하는것)
	- 갑을병에서 프로젝트에 대한 주인의식

스크럼..
페어 프로그래밍..

---------------------------------------------------------------------
애자일 소프트웨어 개발 선언
우리는 소프트웨어를 개발하고, 또 다른 사람의 개발을
도와주면서 소프트웨어 개발의 더 나은 방법들을 찾아가고
있다. 이 작업을 통해 우리는 다음을 가치 있게 여기게 되었다:

공정과 도구보다 개인과 상호작용을
포괄적인 문서보다 작동하는 소프트웨어를
계약 협상보다 고객과의 협력을
계획을 따르기보다 변화에 대응하기를

가치 있게 여긴다. 이 말은, 왼쪽에 있는 것들도 가치가 있지만,
우리는 오른쪽에 있는 것들에 더 높은 가치를 둔다는 것이다.

Kent Beck
Mike Beedle
Arie van Bennekum
Alistair Cockburn
Ward Cunningham
Martin Fowler
James Grenning
Jim Highsmith
Andrew Hunt
Ron Jeffries
Jon Kern
Brian Marick
Robert C. Martin
Steve Mellor
Ken Schwaber
Jeff Sutherland
Dave Thomas
